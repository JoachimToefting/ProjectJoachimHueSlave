
ProjectJoachimHueSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a7  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000747  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ab  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000459  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  00001ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

unsigned char color[9];
unsigned char directColor[3];

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	Init();
  98:	0e 94 69 00 	call	0xd2	; 0xd2 <Init>
	
	while (1)
	{
		ReciveData();
  9c:	0e 94 87 00 	call	0x10e	; 0x10e <ReciveData>
		OCR1A = directColor[0];
  a0:	88 e8       	ldi	r24, 0x88	; 136
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <directColor>
  a8:	22 2f       	mov	r18, r18
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	31 83       	std	Z+1, r19	; 0x01
  b0:	20 83       	st	Z, r18
		OCR1B = directColor[1];
  b2:	8a e8       	ldi	r24, 0x8A	; 138
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <directColor+0x1>
  ba:	22 2f       	mov	r18, r18
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	31 83       	std	Z+1, r19	; 0x01
  c2:	20 83       	st	Z, r18
		OCR0A = directColor[2];
  c4:	87 e4       	ldi	r24, 0x47	; 71
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <directColor+0x2>
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	}
  d0:	e5 cf       	rjmp	.-54     	; 0x9c <main+0xc>

000000d2 <Init>:
}

void Init(void){
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	//output på PORTB bit 1,2,3
	DDRB |= (1<<PORTB1) | (1<<PORTB2);
  da:	84 e2       	ldi	r24, 0x24	; 36
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 e2       	ldi	r18, 0x24	; 36
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	26 60       	ori	r18, 0x06	; 6
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	DDRD |= (1<<PORTD6);
  ec:	8a e2       	ldi	r24, 0x2A	; 42
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2a e2       	ldi	r18, 0x2A	; 42
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	20 64       	ori	r18, 0x40	; 64
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
	Timer_Init();
  fe:	0e 94 16 01 	call	0x22c	; 0x22c <Timer_Init>
	USART_Init();
 102:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_Init>
}
 106:	00 00       	nop
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <ReciveData>:
void ReciveData(void){
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	1f 92       	push	r1
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		unsigned char tmpChar = USART_Receive();
 118:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_Receive>
 11c:	89 83       	std	Y+1, r24	; 0x01
		switch (tmpChar)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	88 2f       	mov	r24, r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	83 35       	cpi	r24, 0x53	; 83
 126:	91 05       	cpc	r25, r1
 128:	09 f0       	breq	.+2      	; 0x12c <ReciveData+0x1e>
			ColorCalculator();
			return;
			break;
			
			default:
			break;
 12a:	05 c0       	rjmp	.+10     	; 0x136 <ReciveData+0x28>
	{
		unsigned char tmpChar = USART_Receive();
		switch (tmpChar)
		{
			case 'S':
			RecieveColor();
 12c:	0e 94 a0 00 	call	0x140	; 0x140 <RecieveColor>
			ColorCalculator();
 130:	0e 94 c1 00 	call	0x182	; 0x182 <ColorCalculator>
			return;
 134:	01 c0       	rjmp	.+2      	; 0x138 <ReciveData+0x2a>
			break;
			
			default:
			break;
		}
	}
 136:	f0 cf       	rjmp	.-32     	; 0x118 <ReciveData+0xa>
}
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <RecieveColor>:
void RecieveColor(void){
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	1f 92       	push	r1
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	for (char cnt = 0; cnt < 9; cnt++)
 14e:	19 82       	std	Y+1, r1	; 0x01
 150:	0e c0       	rjmp	.+28     	; 0x16e <RecieveColor+0x2e>
	{
		color[cnt] = USART_Receive();
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	08 2f       	mov	r16, r24
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_Receive>
 15c:	28 2f       	mov	r18, r24
 15e:	c8 01       	movw	r24, r16
 160:	80 50       	subi	r24, 0x00	; 0
 162:	9f 4f       	sbci	r25, 0xFF	; 255
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
			break;
		}
	}
}
void RecieveColor(void){
	for (char cnt = 0; cnt < 9; cnt++)
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	89 30       	cpi	r24, 0x09	; 9
 172:	78 f3       	brcs	.-34     	; 0x152 <RecieveColor+0x12>
	{
		color[cnt] = USART_Receive();
	}
}
 174:	00 00       	nop
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <ColorCalculator>:
void ColorCalculator(void){
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	
	for (char cnt = 0; cnt < 3; cnt++)
 18c:	19 82       	std	Y+1, r1	; 0x01
 18e:	45 c0       	rjmp	.+138    	; 0x21a <ColorCalculator+0x98>
	{
		directColor[cnt] = ((color[0+cnt*3]-48)*100)+((color[1+cnt*3]-48)*10)+(color[2+cnt*3]-48);
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	48 2f       	mov	r20, r24
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	c9 01       	movw	r24, r18
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	80 50       	subi	r24, 0x00	; 0
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	88 2f       	mov	r24, r24
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	c0 97       	sbiw	r24, 0x30	; 48
 1b4:	98 2f       	mov	r25, r24
 1b6:	84 e6       	ldi	r24, 0x64	; 100
 1b8:	98 9f       	mul	r25, r24
 1ba:	60 2d       	mov	r22, r0
 1bc:	11 24       	eor	r1, r1
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	c9 01       	movw	r24, r18
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	80 50       	subi	r24, 0x00	; 0
 1d2:	9f 4f       	sbci	r25, 0xFF	; 255
 1d4:	fc 01       	movw	r30, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	c0 97       	sbiw	r24, 0x30	; 48
 1de:	88 0f       	add	r24, r24
 1e0:	98 2f       	mov	r25, r24
 1e2:	99 0f       	add	r25, r25
 1e4:	99 0f       	add	r25, r25
 1e6:	89 0f       	add	r24, r25
 1e8:	68 0f       	add	r22, r24
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	28 2f       	mov	r18, r24
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	c9 01       	movw	r24, r18
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	82 0f       	add	r24, r18
 1f8:	93 1f       	adc	r25, r19
 1fa:	02 96       	adiw	r24, 0x02	; 2
 1fc:	80 50       	subi	r24, 0x00	; 0
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	86 0f       	add	r24, r22
 206:	20 ed       	ldi	r18, 0xD0	; 208
 208:	28 0f       	add	r18, r24
 20a:	ca 01       	movw	r24, r20
 20c:	87 5f       	subi	r24, 0xF7	; 247
 20e:	9e 4f       	sbci	r25, 0xFE	; 254
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
		color[cnt] = USART_Receive();
	}
}
void ColorCalculator(void){
	
	for (char cnt = 0; cnt < 3; cnt++)
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	08 f4       	brcc	.+2      	; 0x222 <ColorCalculator+0xa0>
 220:	b7 cf       	rjmp	.-146    	; 0x190 <ColorCalculator+0xe>
	{
		directColor[cnt] = ((color[0+cnt*3]-48)*100)+((color[1+cnt*3]-48)*10)+(color[2+cnt*3]-48);
	}
}
 222:	00 00       	nop
 224:	0f 90       	pop	r0
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <Timer_Init>:
* Created: 08/12/2020 12.29.06
*  Author: Joachim
*/
#include <avr/io.h>

void Timer_Init(void){
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
	
	//Timer1
	//Waveform Generation mode bit (Table 15-5) set to: Fast PWM, 8-bit top 0x00FF
	TCCR1A |= (1<<WGM10);
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	20 e8       	ldi	r18, 0x80	; 128
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	20 81       	ld	r18, Z
 240:	21 60       	ori	r18, 0x01	; 1
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
	TCCR1B |= (1<<WGM12);
 246:	81 e8       	ldi	r24, 0x81	; 129
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	21 e8       	ldi	r18, 0x81	; 129
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	28 60       	ori	r18, 0x08	; 8
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
	
	//Compare Output Mode (Table 15-3) set to: non-inverting mode
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1);
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	20 e8       	ldi	r18, 0x80	; 128
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	f9 01       	movw	r30, r18
 262:	20 81       	ld	r18, Z
 264:	20 6a       	ori	r18, 0xA0	; 160
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
	
	//Clock Select Bit (Table 15-6) set to: clk_io/64 prescaler
	TCCR1B |= (1<<CS11) | (1<<CS10);
 26a:	81 e8       	ldi	r24, 0x81	; 129
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	21 e8       	ldi	r18, 0x81	; 129
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	f9 01       	movw	r30, r18
 274:	20 81       	ld	r18, Z
 276:	23 60       	ori	r18, 0x03	; 3
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
	
	
	
	//Timer0
	//Waveform Generation mode bit (Table 14-8) set to: Fast PWM with top 0xFF
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
 27c:	84 e4       	ldi	r24, 0x44	; 68
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	24 e4       	ldi	r18, 0x44	; 68
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	23 60       	ori	r18, 0x03	; 3
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	
	//Compare Output Mode (Table 14-3) set to: non-inverting mode
	TCCR0A |= (1<<COM0A1);
 28e:	84 e4       	ldi	r24, 0x44	; 68
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	24 e4       	ldi	r18, 0x44	; 68
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	20 68       	ori	r18, 0x80	; 128
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
	
	//Clock Select Bit (Table 14-9) set to: clk_io/64 prescaler
	TCCR0B |= (1<<CS11) | (1<<CS10);
 2a0:	85 e4       	ldi	r24, 0x45	; 69
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	25 e4       	ldi	r18, 0x45	; 69
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	23 60       	ori	r18, 0x03	; 3
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
 2b2:	00 00       	nop
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <USART_Init>:
 */ 
#include "USART.h"
#include <avr/io.h>
#include <util/setbaud.h>

void USART_Init(void){
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
	UBRR0H = UBRRH_VALUE;					// set UART0 baud rate with setbaud-library
 2c2:	85 ec       	ldi	r24, 0xC5	; 197
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	10 82       	st	Z, r1
	UBRR0L = UBRRL_VALUE;
 2ca:	84 ec       	ldi	r24, 0xC4	; 196
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	27 e6       	ldi	r18, 0x67	; 103
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18

	UCSR0B = (1<<RXEN0) | (1<<TXEN0);		// Enable Receiver and Transmitter (19.10.3)
 2d4:	81 ec       	ldi	r24, 0xC1	; 193
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	28 e1       	ldi	r18, 0x18	; 24
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);		// Set frame format: 8 bit data, 1 stop bit (19.10.4) og Table 19-7
 2de:	82 ec       	ldi	r24, 0xC2	; 194
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	26 e0       	ldi	r18, 0x06	; 6
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
}
 2e8:	00 00       	nop
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <USART_Receive>:

unsigned char USART_Receive(void)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	while (	!(UCSR0A & (1<<RXC0)));			// Wait for data to be received (19.10.2)
 2f8:	00 00       	nop
 2fa:	80 ec       	ldi	r24, 0xC0	; 192
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	fc 01       	movw	r30, r24
 300:	80 81       	ld	r24, Z
 302:	88 23       	and	r24, r24
 304:	d4 f7       	brge	.-12     	; 0x2fa <USART_Receive+0xa>
	return UDR0;							// Get and return received data from buffer
 306:	86 ec       	ldi	r24, 0xC6	; 198
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	fc 01       	movw	r30, r24
 30c:	80 81       	ld	r24, Z
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
