
ProjectJoachimHueSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000854  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071d  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c2  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init>:
    }
}

void Init(void){
	//output on PORTB bit 1,2,3
	DDRB |= (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 60       	ori	r24, 0x0E	; 14
  84:	84 b9       	out	0x04, r24	; 4
	Init_Timer();
  86:	0e 94 83 00 	call	0x106	; 0x106 <Init_Timer>
  8a:	08 95       	ret

0000008c <main>:
#include "Timer/timer.h"


int main(void)
{
	Init();
  8c:	0e 94 40 00 	call	0x80	; 0x80 <Init>
	
    while (1) 
    {
		OCR1A = 127;
  90:	c8 e8       	ldi	r28, 0x88	; 136
  92:	d0 e0       	ldi	r29, 0x00	; 0
  94:	8f e7       	ldi	r24, 0x7F	; 127
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	99 83       	std	Y+1, r25	; 0x01
  9a:	88 83       	st	Y, r24
		OCR1B = 127;
  9c:	aa e8       	ldi	r26, 0x8A	; 138
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	11 96       	adiw	r26, 0x01	; 1
  a2:	9c 93       	st	X, r25
  a4:	8e 93       	st	-X, r24
		OCR2A = 127;
  a6:	e3 eb       	ldi	r30, 0xB3	; 179
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x26>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x30>
  bc:	00 00       	nop
		_delay_ms(1000);
		OCR1A = 255;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	99 83       	std	Y+1, r25	; 0x01
  c4:	88 83       	st	Y, r24
		OCR1B = 69;
  c6:	85 e4       	ldi	r24, 0x45	; 69
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	9c 93       	st	X, r25
  ce:	8e 93       	st	-X, r24
		OCR2A = 0;
  d0:	10 82       	st	Z, r1
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	83 ed       	ldi	r24, 0xD3	; 211
  d6:	90 e3       	ldi	r25, 0x30	; 48
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x4c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x56>
  e2:	00 00       	nop
		_delay_ms(1000);
		OCR1A = 0;
  e4:	19 82       	std	Y+1, r1	; 0x01
  e6:	18 82       	st	Y, r1
		OCR1B = 0;
  e8:	11 96       	adiw	r26, 0x01	; 1
  ea:	1c 92       	st	X, r1
  ec:	1e 92       	st	-X, r1
		OCR2A = 255;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	80 83       	st	Z, r24
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	83 ed       	ldi	r24, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x6c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x76>
 102:	00 00       	nop
 104:	c5 cf       	rjmp	.-118    	; 0x90 <main+0x4>

00000106 <Init_Timer>:

void Init_Timer(void){
	
	//Timer1
	//Waveform Generation mode bit (Table 15-5) set to: Fast PWM, 8-bit
	TCCR1A |= (1<<WGM10);
 106:	a0 e8       	ldi	r26, 0x80	; 128
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	8c 91       	ld	r24, X
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12);
 110:	e1 e8       	ldi	r30, 0x81	; 129
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 60       	ori	r24, 0x08	; 8
 118:	80 83       	st	Z, r24
	
	//Compare Output Mode (Table 15-3) set to: non-inverting mode
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1);
 11a:	8c 91       	ld	r24, X
 11c:	80 6a       	ori	r24, 0xA0	; 160
 11e:	8c 93       	st	X, r24
	
	//Clock Select Bit (Table 15-6) set to: clk_io/64 prescaler
	TCCR1B |= (1<<CS11) | (1<<CS10);
 120:	80 81       	ld	r24, Z
 122:	83 60       	ori	r24, 0x03	; 3
 124:	80 83       	st	Z, r24
	
	
	
	//Timer2
	//Waveform Generation mode bit (Table 17-8) set to: Fast PWM, 8-bit
	TCCR2A |= (1<<WGM20);
 126:	a0 eb       	ldi	r26, 0xB0	; 176
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	8c 93       	st	X, r24
	TCCR2B |= (1<<WGM22);
 130:	e1 eb       	ldi	r30, 0xB1	; 177
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 60       	ori	r24, 0x08	; 8
 138:	80 83       	st	Z, r24
	
	//Compare Output Mode (Table 17-3) set to: non-inverting mode
	TCCR2A |= (1<<COM2A1);
 13a:	8c 91       	ld	r24, X
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8c 93       	st	X, r24
	
	//Clock Select Bit (Table 17-9) set to: clk_io/64 prescaler
	TCCR2B |= (1<<CS21) | (1<<CS20);
 140:	80 81       	ld	r24, Z
 142:	83 60       	ori	r24, 0x03	; 3
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
